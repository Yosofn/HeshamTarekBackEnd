// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using DataAccessLayer.Models;
using Microsoft.EntityFrameworkCore;

namespace DataAccessLayer.Data;

public partial class AppDbContext : DbContext
{
    public AppDbContext(DbContextOptions<AppDbContext> options)
    : base(options)
    {

    }

    public virtual DbSet<Answer> Answers { get; set; }

    public virtual DbSet<AnswerLike> AnswerLikes { get; set; }

    public virtual DbSet<BlockedLecture> BlockedLectures { get; set; }

    public virtual DbSet<Chat> Chats { get; set; }

    public virtual DbSet<ChatStatue> ChatStatues { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Division> Divisions { get; set; }

    public virtual DbSet<Exam> Exams { get; set; }

    public virtual DbSet<ExamDetail> ExamDetails { get; set; }

    public virtual DbSet<Faculty> Facultys { get; set; }

    public virtual DbSet<Favorite> Favorites { get; set; }

    public virtual DbSet<Homework> Homeworks { get; set; }

    public virtual DbSet<LatestOffer> LatestOffers { get; set; }

    public virtual DbSet<Lecture> Lectures { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }
    public DbSet<Package> Packages { get; set; }
    public DbSet<Desktop> Desktop { get; set; }

    public DbSet<PackageLesson> PackageLessons { get; set; }

    public virtual DbSet<Level> Levels { get; set; }

    public virtual DbSet<Life> Lives { get; set; }

    public virtual DbSet<Material> Materials { get; set; }

    public virtual DbSet<News> News { get; set; }

    public virtual DbSet<Notif> Notifs { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<PaymentDetail> PaymentDetails { get; set; }

    public virtual DbSet<Post> Posts { get; set; }

    public virtual DbSet<PostLike> PostLikes { get; set; }

    public virtual DbSet<Question> Questions { get; set; }

    public virtual DbSet<QuestionAnswer> QuestionAnswers { get; set; }

    public virtual DbSet<Questions2> Questions2s { get; set; }

    public virtual DbSet<Result> Results { get; set; }

    public virtual DbSet<Room> Rooms { get; set; }

    public virtual DbSet<RoomUser> RoomUsers { get; set; }

    public virtual DbSet<Setting> Settings { get; set; }

    public virtual DbSet<Unit> Units { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Publish> publish { get; set; }
    public virtual DbSet<MobileUpdate> MobileUpdate { get; set; }

    public DbSet<FreeFile> FreeFiles { get; set; }
    public DbSet<FreeVideo> FreeVideos { get; set; }
    public DbSet<FreeProject> FreeProjects { get; set; }
    public DbSet<FreeBook> FreeBooks { get; set; }

    public DbSet<LessonFile> LessonFiles { get; set; }
    public DbSet<LectureFile> LectureFiles { get; set; }
    public DbSet<LessonDetails> LessonDetails { get; set; }
    public DbSet<LessonDetailsWithoutEncryption> LessonDetailsWithoutEncryption { get; set; }

    public DbSet<OTP> OTPs { get; set; }
    public DbSet<RefreshToken> RefreshTokens { get; set; }
    public DbSet<Article> Article { get; set; }
    public DbSet<UsersWithLessons> UserBlockedLessons { get; set; }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        modelBuilder.Entity<OTP>()
         .HasOne(o => o.User)
         .WithMany(u => u.OTPs) // Assuming User has multiple OTPs
         .HasForeignKey(o => o.UserId)
         .OnDelete(DeleteBehavior.Cascade); // حذف OTPs عند حذف المستخدم
        modelBuilder.Entity<Publish>().HasNoKey();

        modelBuilder.Entity<LessonDetails>()
       .HasNoKey()
       .ToView("vw_LessonDetails");

        modelBuilder.Entity<LessonDetailsWithoutEncryption>()
       .HasNoKey()
       .ToView("vw_LessonDetailsWithoutEncryption");

        modelBuilder.Entity<Answer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Answers");

            entity.HasOne(d => d.Post).WithMany(p => p.Answers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Answers_dbo.Posts_PostId");
        });

        modelBuilder.Entity<AnswerLike>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AnswerLikes");

            entity.HasOne(d => d.Answer).WithMany(p => p.AnswerLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AnswerLikes_dbo.Answers_AnswerId");

            entity.HasOne(d => d.User).WithMany(p => p.AnswerLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AnswerLikes_dbo.Users_UserId");
        });

        modelBuilder.Entity<BlockedLecture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BlockedLectures");

            entity.HasOne(d => d.Lesson).WithMany(p => p.BlockedLectures).HasConstraintName("FK_dbo.BlockedLectures_dbo.Lessons_LessonId");

            entity.HasOne(d => d.User).WithMany(p => p.BlockedLectures)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.BlockedLectures_dbo.Users_UserId").OnDelete(DeleteBehavior.Cascade);
            ;
        });

        modelBuilder.Entity<Chat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Chats");
        });

        modelBuilder.Entity<ChatStatue>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ChatStatues");

            entity.HasOne(d => d.Chat).WithMany(p => p.ChatStatues)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ChatStatues_dbo.Chats_ChatId");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Coupons");

            entity.HasOne(d => d.User).WithMany(p => p.Coupons).HasConstraintName("FK_dbo.Coupons_dbo.Users_UserId").OnDelete(DeleteBehavior.Cascade);;
        });

        modelBuilder.Entity<Division>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Divisions");

            entity.HasOne(d => d.Level).WithMany(p => p.Divisions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Divisions_dbo.Levels_LevelId");
        });

        modelBuilder.Entity<Exam>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Exams");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Exams).HasConstraintName("FK_dbo.Exams_dbo.Lessons_LessonId");

            entity.HasOne(d => d.Material).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Exams_dbo.Materials_MaterialId");

            entity.HasOne(d => d.Unit).WithMany(p => p.Exams).HasConstraintName("FK_dbo.Exams_dbo.Units_UnitId");

            entity.HasOne(d => d.User).WithMany(p => p.Exams)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Exams_dbo.Users_UserId");
            ;
        });

        modelBuilder.Entity<ExamDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExamDetails");

            entity.HasOne(d => d.Exam).WithMany(p => p.ExamDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExamDetails_dbo.Exams_ExamId");
        });

        modelBuilder.Entity<Faculty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Facultys");
        });

         // Prevents cascading delete


        modelBuilder.Entity<Favorite>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Favorite__3214EC074EA34932");

            entity.HasOne(d => d.Course).WithMany(p => p.Favorites)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Favorites__Cours__3D2915A8");

                 entity.HasOne(d => d.User)
               .WithMany(p => p.Favorites)
               .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("FK__Favorites__UserI__3C34F16F");
            ;
        });

        modelBuilder.Entity<Homework>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Homeworks");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Homeworks).HasConstraintName("FK_dbo.Homeworks_dbo.Lessons_LessonId");

            entity.HasOne(d => d.Material).WithMany(p => p.Homeworks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Homeworks_dbo.Materials_MaterialId");

            entity.HasOne(d => d.User).WithMany(p => p.Homeworks)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Homeworks_dbo.Users_UserId");
        });

        modelBuilder.Entity<LatestOffer>(entity =>
        {
            entity.HasKey(e => e.OfferId).HasName("PK__LatestOf__8EBCF09143C55FA9");
        });

        modelBuilder.Entity<Lecture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Lectures");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Lectures).HasConstraintName("FK_dbo.Lectures_dbo.Lessons_LessonId");

            entity.HasOne(d => d.Material).WithMany(p => p.Lectures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Lectures_dbo.Materials_MaterialId");

            entity.HasOne(d => d.User).WithMany(p => p.Lectures)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Lectures_dbo.Users_UserId");
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            // تحديد المفتاح الأساسي للكيان
            entity.HasKey(e => e.Id).HasName("PK_dbo.Lessons");

            // تحديد العلاقة بين Lesson و Material
            entity.HasOne(l => l.Material) // تحديد أن Lesson يحتوي على واحد من Material
                .WithMany() // هنا نفترض أن Material ليس لديه خاصية تنقلية إلى Lesson
                .HasForeignKey(l => l.MaterialId) // تحديد المفتاح الخارجي
                .OnDelete(DeleteBehavior.Cascade); // تفعيل الحذف التلقائي عند حذف Material
        });


        modelBuilder.Entity<Level>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Levels");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Levels)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Levels_dbo.Facultys_FacultyId");
        });

        modelBuilder.Entity<Life>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Lives");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Lives).HasConstraintName("FK_dbo.Lives_dbo.Lessons_LessonId");

            entity.HasOne(d => d.Material).WithMany(p => p.Lives)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Lives_dbo.Materials_MaterialId");

            entity.HasOne(d => d.User).WithMany(p => p.Lives)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Lives_dbo.Users_UserId");
        });



        modelBuilder.Entity<News>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.News");

            entity.HasOne(d => d.Faculty).WithMany(p => p.News).HasConstraintName("FK_dbo.News_dbo.Facultys_FacultyId");
        });

        modelBuilder.Entity<Notif>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Notifs");

            entity.HasOne(d => d.Division).WithMany(p => p.Notifs).HasConstraintName("FK_dbo.Notifs_dbo.Divisions_DivisionId");

            entity.HasOne(d => d.Faculty).WithMany(p => p.Notifs).HasConstraintName("FK_dbo.Notifs_dbo.Facultys_FacultyId");

            entity.HasOne(d => d.Level).WithMany(p => p.Notifs).HasConstraintName("FK_dbo.Notifs_dbo.Levels_LevelId");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Payments");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Payments_dbo.Users_UserId");
        });

        modelBuilder.Entity<PaymentDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PaymentDetails");

            entity.HasOne(d => d.User).WithMany(p => p.PaymentDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PaymentDetails_dbo.Users_UserId");
        });

        modelBuilder.Entity<Post>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Posts");

            entity.HasOne(d => d.Material).WithMany(p => p.Posts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Posts_dbo.Materials_MaterialId");

            entity.HasOne(d => d.User).WithMany(p => p.Posts)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Posts_dbo.Users_UserId");
        });

        modelBuilder.Entity<PostLike>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PostLikes");

            entity.HasOne(d => d.Post).WithMany(p => p.PostLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PostLikes_dbo.Posts_PostId");

            entity.HasOne(d => d.User).WithMany(p => p.PostLikes)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PostLikes_dbo.Users_UserId");
        });

        modelBuilder.Entity<Question>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Questions");

            entity.HasOne(d => d.Material).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.Questions_dbo.Materials_MaterialId");

            entity.HasOne(d => d.Unit).WithMany(p => p.Questions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Questions_dbo.Units_UnitId");
        });

        modelBuilder.Entity<QuestionAnswer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.QuestionAnswers");

            entity.HasOne(d => d.Question).WithMany(p => p.QuestionAnswers)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.QuestionAnswers_dbo.Questions_QuestionId");

            entity.HasOne(d => d.User).WithMany(p => p.QuestionAnswers)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_dbo.QuestionAnswers_dbo.Users_UserId");
        });

        modelBuilder.Entity<Questions2>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Questions2");

            entity.HasOne(d => d.Lesson).WithMany(p => p.Questions2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Questions2_dbo.Lessons_LessonId");

            entity.HasOne(d => d.Material).WithMany(p => p.Questions2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Questions2_dbo.Materials_MaterialId");

            entity.HasOne(d => d.Unit).WithMany(p => p.Questions2s)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Questions2_dbo.Units_UnitId");
        });

        modelBuilder.Entity<Result>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Results");

            entity.HasOne(d => d.Exam).WithMany(p => p.Results)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Results_dbo.Exams_ExamId");

            entity.HasOne(d => d.User).WithMany(p => p.Results)
.OnDelete(DeleteBehavior.Cascade).HasConstraintName("FK_dbo.Results_dbo.Users_UserId");
        });

        modelBuilder.Entity<Room>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Rooms");
        });

        modelBuilder.Entity<RoomUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RoomUsers");
        });

        modelBuilder.Entity<Setting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Settings");
        });

        modelBuilder.Entity<Unit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Units");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Users");
        }); 
        modelBuilder.Entity<Article>(entity =>

        {
            entity.HasKey(e => e.Id);
        });


        modelBuilder.Entity<PackageLesson>()
           .HasKey(pl => pl.PackageLessonId); 

        modelBuilder.Entity<PackageLesson>()
            .HasOne(pl => pl.Package)
            .WithMany(p => p.PackageLessons)
            .HasForeignKey(pl => pl.PackageId)
            .OnDelete(DeleteBehavior.Cascade); 

        modelBuilder.Entity<PackageLesson>()
            .HasOne(pl => pl.Lesson)
            .WithMany(l => l.PackageLessons)
            .HasForeignKey(pl => pl.LessonId)
            .OnDelete(DeleteBehavior.Cascade);
    
    OnModelCreatingPartial(modelBuilder);
        modelBuilder.Entity<OTP>()
       .HasOne(o => o.User)
       .WithMany(u => u.OTPs)
       .HasForeignKey(o => o.UserId)
       .OnDelete(DeleteBehavior.Cascade);
        modelBuilder.Entity<UsersWithLessons>().HasNoKey().ToView(null);
    }
    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}